# -*- coding: utf-8 -*-
"""GH 2024 Silicon Engineering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/109q0QL7pBysd0am-RfJsMx3q3y3ZPoj9
"""

def calculate_average_latency(trace):
  """
  This function calculates the average read latency from the simulator trace.

  Args:
      trace: A list of dictionaries representing each transaction in the trace.
          Each dictionary should have keys: "Timestamp", "TxnType", "Data".

  Returns:
      float: The average read latency in cycles.
  """
  total_latency = 0
  read_count = 0
  for entry in trace:
    if entry["TxnType"] == "Rd":
      # Get the latency for this read by subtracting timestamps
      latency = entry["Timestamp"] - trace[trace.index(entry) - 1]["Timestamp"]
      total_latency += latency
      read_count += 1
  # Avoid division by zero if there are no reads
  if read_count == 0:
    return 0
  return total_latency / read_count

def calculate_bandwidth(trace, cycle_time):
  """
  This function calculates the bandwidth at the interface.

  Args:
      trace: A list of dictionaries representing each transaction in the trace.
          Each dictionary should have keys: "Timestamp", "TxnType".
      cycle_time: float - The time for one cycle (1/operating frequency).

  Returns:
      float: The bandwidth in Bytes/sec.
  """
  total_bytes = 0
  last_timestamp = 0
  for entry in trace:
    # Only count data transfers (Rd or Wr)
    if entry["TxnType"] in ("Rd", "Wr"):
      # Calculate bytes transferred based on fixed data width
      bytes_transferred = 32
      # Calculate time difference between transactions
      time_diff = max(entry["Timestamp"] - last_timestamp, cycle_time) * cycle_time
      # Update total bytes based on time difference
      total_bytes += bytes_transferred / time_diff
      last_timestamp = entry["Timestamp"]
  return total_bytes

trace = [
  {"Timestamp": 0, "TxnType": "Rd", "Data": None},
  {"Timestamp": 10, "TxnType": "Data", "Data": "......."},  # Assuming data isn't important for latency calculation
  {"Timestamp": 15, "TxnType": "Wr", "Data": None},
  {"Timestamp": 20, "TxnType": "Rd", "TxnType": None},
  {"Timestamp": 32, "TxnType": "Data", "Data": "......."},
  {"Timestamp": 40, "TxnType": "Rd", "TxnType": None},  # Missing response for this read
  {"Timestamp": 50, "TxnType": "Data", "Data": "......."},
]

operating_frequency = 1e9  # Assuming operating frequency is 1 GHz (1 billion cycles per second)

cycle_time = 1 / operating_frequency

average_read_latency = calculate_average_latency(trace)
bandwidth = calculate_bandwidth(trace, cycle_time)

print(f"Average Read Latency: {average_read_latency:.2f} cycles")
print(f"Bandwidth: {bandwidth:.2f} Bytes/sec")